<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Space Dodger</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Use Inter font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden; /* Prevent scrolling on mobile */
            touch-action: none; /* Disable panning and zooming */
        }
        canvas {
            background-color: #0c0a1f; /* Dark space blue */
            display: block;
            touch-action: none; /* Disable touch gestures on canvas */
            /* Add a subtle nebula/starfield background */
            background-image: 
                radial-gradient(circle at 20% 30%, rgba(100, 100, 200, 0.2) 0%, transparent 40%),
                radial-gradient(circle at 80% 70%, rgba(200, 100, 100, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.05) 0%, transparent 2%);
            background-size: 100% 100%;
        }
        /* Ensure the modal is centered and has a backdrop */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 50;
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex flex-col items-center justify-center min-h-screen p-4">

    <!-- Game Title -->
    <h1 class="text-3xl md:text-4xl font-bold text-cyan-300 mb-4">Space Dodger</h1>

    <!-- Score Display -->
    <div class="mb-4 text-lg md:text-2xl">
        Score: <span id="score" class="font-bold text-yellow-300">0</span>
    </div>

    <!-- Game Canvas -->
    <div class="w-full max-w-lg aspect-square rounded-lg shadow-2xl overflow-hidden border-2 border-cyan-400">
        <canvas id="gameCanvas"></canvas>
    </div>

    <!-- Mobile Touch Controls -->
    <div class="md:hidden w-full max-w-lg mt-4 grid grid-cols-2 gap-4">
        <button id="moveLeftBtn" class="bg-cyan-600 active:bg-cyan-700 text-white font-bold py-4 rounded-lg shadow-lg text-xl">
            &larr; Left
        </button>
        <button id="moveRightBtn" class="bg-cyan-600 active:bg-cyan-700 text-white font-bold py-4 rounded-lg shadow-lg text-xl">
            Right &rarr;
        </button>
    </div>

    <!-- Game Over / Start Modal -->
    <div id="modalBackdrop" class="modal-backdrop hidden">
        <div id="gameModal" class="bg-gray-800 p-8 rounded-lg shadow-xl text-center border-2 border-cyan-300">
            <h2 id="modalTitle" class="text-3xl font-bold mb-4">Game Over!</h2>
            <p id="modalScore" class="text-xl mb-6">Your Score: 0</p>
            <button id="restartButton" class="bg-yellow-500 hover:bg-yellow-600 text-gray-900 font-bold py-3 px-8 rounded-lg text-xl transition duration-200">
                Play Again
            </button>
        </div>
    </div>

    <script>
        // --- Canvas & Context Setup ---
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // --- DOM Elements ---
        const scoreEl = document.getElementById('score');
        const modalBackdrop = document.getElementById('modalBackdrop');
        const modalTitle = document.getElementById('modalTitle');
        const modalScore = document.getElementById('modalScore');
        const restartButton = document.getElementById('restartButton');
        
        // --- Mobile Controls ---
        const moveLeftBtn = document.getElementById('moveLeftBtn');
        const moveRightBtn = document.getElementById('moveRightBtn');

        // --- Game State Variables ---
        let player;
        let obstacles = [];
        let score = 0;
        let gameSpeed = 1.0; // Start with slow speed
        let isGameOver = false;
        let animationFrameId;
        
        // Difficulty timers
        let obstacleSpawnTimer = 0;
        let obstacleSpawnInterval = 70; // Start with slow spawn rate

        // Player movement state
        let moveLeft = false;
        let moveRight = false;
        
        // --- NEW: Player Image ---
        let playerImage = new Image();
        let playerImageLoaded = false;
        const playerImageFilename = 'spaceship.jpg'; // The file you uploaded to GitHub

        playerImage.src = playerImageFilename;
        playerImage.onload = function() {
            playerImageLoaded = true;
            console.log("Player image loaded successfully!");
        }
        playerImage.onerror = function() {
            console.error(`Failed to load '${playerImageFilename}'. Make sure it's in your GitHub repository with this exact name.`);
            playerImageLoaded = false; // Fallback to drawing a square
        }

        // --- Game Functions ---

        // Resize canvas to fit its container
        function resizeCanvas() {
            // Get the container's size
            const container = canvas.parentElement;
            const size = container.clientWidth;
            
            // Set canvas internal resolution
            canvas.width = size;
            canvas.height = size;

            // Update player size/position (if player exists)
            if (player) {
                const oldWidth = player.width;
                const oldHeight = player.height;
                player.width = canvas.width * 0.1; // 10% of canvas width
                player.height = player.width; // Keep it square
                player.speed = canvas.width * 0.015; // Responsive speed
                // Adjust position based on new size
                player.x = player.x * (canvas.width / oldWidth);
                player.y = canvas.height - player.height - 10;
            }
            
            // Redraw if game is running
            if (!isGameOver) {
                // Clear and redraw all elements (or just player)
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                if(player) drawPlayer();
                updateAndDrawObstacles(); // Redraw existing obstacles
            }
        }

        // Create the player object
        function createPlayer() {
            const playerSize = canvas.width * 0.1; // 10% of canvas width
            return {
                x: canvas.width / 2 - playerSize / 2,
                y: canvas.height - playerSize - 10,
                width: playerSize,
                height: playerSize,
                speed: canvas.width * 0.015, // Responsive speed
                dx: 0 // Horizontal velocity
            };
        }

        // Draw the player (Image or Fallback)
        function drawPlayer() {
            // --- MODIFIED: Draw Image ---
            if (playerImageLoaded) {
                // Draw the loaded spaceship image
                ctx.drawImage(playerImage, player.x, player.y, player.width, player.height);
            } else {
                // Fallback if image fails to load: draw a blue square
                ctx.fillStyle = '#4A90E2'; // Blue
                ctx.shadowColor = '#81D4FA'; // Light blue glow
                ctx.shadowBlur = 15;
                ctx.fillRect(player.x, player.y, player.width, player.height);
                ctx.shadowBlur = 0; // Reset shadow
            }
            // --- END MODIFICATION ---
        }

        // Update player's position
        function updatePlayer() {
            if (moveLeft) {
                player.x -= player.speed;
            }
            if (moveRight) {
                player.x += player.speed;
            }

            // Keep player within canvas bounds
            if (player.x < 0) {
                player.x = 0;
            }
            if (player.x + player.width > canvas.width) {
                player.x = canvas.width - player.width;
            }
        }

        // Create a new obstacle (meteor)
        function createObstacle() {
            const size = Math.random() * (canvas.width * 0.08) + (canvas.width * 0.03); // Random size
            obstacles.push({
                x: Math.random() * (canvas.width - size), // Random x position
                y: -size, // Start above the screen
                width: size,
                height: size,
                speed: Math.random() * 2 + gameSpeed // Random speed based on game speed
            });
        }

        // Function to draw a meteor
        function drawMeteor(x, y, radius) {
            ctx.save();
            ctx.beginPath();
            
            // Center of the meteor
            const centerX = x + radius;
            const centerY = y + radius;
            
            ctx.moveTo(centerX + radius, centerY);

            // Draw a jagged, irregular circle
            const segments = 10;
            for (let i = 1; i <= segments; i++) {
                const angle = (i / segments) * 2 * Math.PI;
                const newRadius = radius * (0.8 + Math.random() * 0.4); 
                ctx.lineTo(centerX + newRadius * Math.cos(angle), centerY + newRadius * Math.sin(angle));
            }
            ctx.closePath();

            // Style the meteor
            ctx.fillStyle = '#8B4513'; // SaddleBrown (rocky color)
            ctx.shadowColor = '#A0522D'; // Sienna (shadow/glow)
            ctx.shadowBlur = 10;
            ctx.fill();

            // Add a simple crater
            ctx.beginPath();
            ctx.arc(centerX + radius * 0.2, centerY - radius * 0.1, radius * 0.3, 0, 2 * Math.PI);
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)'; // Dark shadow for crater
            ctx.fill();
            
            ctx.restore();
        }

        // Update and draw all obstacles
        function updateAndDrawObstacles() {
            for (let i = obstacles.length - 1; i >= 0; i--) {
                let obs = obstacles[i];
                obs.y += obs.speed; // Move obstacle down

                // Draw the obstacle as a meteor
                drawMeteor(obs.x, obs.y, obs.width / 2);

                // Remove obstacle if it's off-screen
                if (obs.y > canvas.height) {
                    obstacles.splice(i, 1);
                    score += 10; // Add to score for dodging
                    scoreEl.textContent = score;

                    // --- Difficulty Ramp ---
                    // Increase game speed every 100 points, ONLY AFTER 500
                    if (score >= 500 && score % 100 === 0) {
                        gameSpeed += 0.2; // Slowly increase speed
                    }
                }
            }
        }

        // Check for collisions between player and obstacles
        function checkCollisions() {
            for (let obs of obstacles) {
                // Simple AABB (Axis-Aligned Bounding Box) collision detection
                // Add a small buffer/padding (e.g., 10px or player.width * 0.1) to make it more forgiving
                const padding = player.width * 0.15; // 15% padding on each side
                
                if (
                    player.x < obs.x + obs.width - padding &&
                    player.x + player.width > obs.x + padding &&
                    player.y < obs.y + obs.height - padding &&
                    player.y + player.height > obs.y + padding
                ) {
                    // Collision detected
                    gameOver();
                    break;
                }
            }
        }

        // Handle game over
        function gameOver() {
            isGameOver = true;
            cancelAnimationFrame(animationFrameId); // Stop the game loop
            
            // Show game over modal
            modalTitle.textContent = 'Game Over!';
            modalScore.textContent = `Your Score: ${score}`;
            modalBackdrop.classList.remove('hidden');
        }

        // Start or restart the game
        function initGame() {
            // Resize canvas to fit container on start
            resizeCanvas();
            
            // Initialize game variables
            player = createPlayer();
            obstacles = [];
            score = 0;
            gameSpeed = 1.0; // Reset base speed
            isGameOver = false;
            obstacleSpawnTimer = 0;
            obstacleSpawnInterval = 70; // Reset spawn rate
            
            // Reset UI
            scoreEl.textContent = '0';
            modalBackdrop.classList.add('hidden');
            
            // Start the game loop
            gameLoop();
        }

        // --- Main Game Loop ---
        function gameLoop() {
            if (isGameOver) return;

            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Update and draw game elements
            updatePlayer();
            drawPlayer();
            updateAndDrawObstacles();

            // Check for collisions
            checkCollisions();

            // --- Spawn new obstacles based on difficulty ramp ---
            obstacleSpawnTimer++;

            if (score < 500) {
                obstacleSpawnInterval = 70; // Constant slow spawn rate
            } else {
                // After 500, make obstacles spawn faster as game speed increases
                obstacleSpawnInterval = Math.max(20, 70 - (gameSpeed - 1.0) * 10);
            }
            
            if (obstacleSpawnTimer >= obstacleSpawnInterval) {
                createObstacle();
                obstacleSpawnTimer = 0;
            }

            // Request the next frame
            animationFrameId = requestAnimationFrame(gameLoop);
        }

        // --- Event Listeners ---

        // Keyboard controls
        function handleKeyDown(e) {
            if (e.key === 'ArrowLeft' || e.key === 'a') {
                moveLeft = true;
            } else if (e.key === 'ArrowRight' || e.key === 'd') {
                moveRight = true;
            }
        }

        function handleKeyUp(e) {
            if (e.key === 'ArrowLeft' || e.key === 'a') {
                moveLeft = false;
            } else if (e.key === 'ArrowRight' || e.key === 'd') {
                moveRight = false;
            }
        }

        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        // Touch controls
        moveLeftBtn.addEventListener('touchstart', (e) => { e.preventDefault(); moveLeft = true; }, { passive: false });
        moveLeftBtn.addEventListener('touchend', (e) => { e.preventDefault(); moveLeft = false; }, { passive: false });
        moveRightBtn.addEventListener('touchstart', (e) => { e.preventDefault(); moveRight = true; }, { passive: false });
        moveRightBtn.addEventListener('touchend', (e) => { e.preventDefault(); moveRight = false; }, { passive: false });

        // Restart button
        restartButton.addEventListener('click', initGame);

        // Window resize
        window.addEventListener('resize', resizeCanvas);

        // --- Initial Game Start ---
        // Show "Start Game" modal on first load
        modalTitle.textContent = 'Space Dodger';
        modalScore.textContent = 'Dodge the meteors!';
        restartButton.textContent = 'Start Game';
        modalBackdrop.classList.remove('hidden');
        
        // We don't call initGame() here, we wait for the user to click "Start Game"
        
    </script>
</body>
</html>

